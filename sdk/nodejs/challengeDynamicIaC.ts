// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * CTFd is built around the Challenge resource, which contains all the attributes to define a part of the Capture The Flag event.
 *
 * This implementation has support of On Demand infrastructures through [Chall-Manager](https://github.com/ctfer-io/chall-manager).
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as ctfd from "@ctfer-io/pulumi-ctfd";
 * import * as ctfdcm from "@ctfer-io/pulumi-ctfdcm";
 *
 * const http = new ctfdcm.ChallengeDynamicIaC("http", {
 *     category: "misc",
 *     description: "...",
 *     value: 500,
 *     decay: 100,
 *     minimum: 50,
 *     state: "visible",
 *     "function": "logarithmic",
 *     shared: true,
 *     destroyOnFlag: true,
 *     manaCost: 1,
 *     scenario: "localhost:5000/some/scenario:v0.1.0",
 *     timeout: 600,
 *     topics: ["Misc"],
 *     tags: [
 *         "misc",
 *         "basic",
 *     ],
 * });
 * const httpFlag = new ctfd.Flag("httpFlag", {
 *     challengeId: http.id,
 *     content: "CTF{some_flag}",
 * });
 * ```
 */
export class ChallengeDynamicIaC extends pulumi.CustomResource {
    /**
     * Get an existing ChallengeDynamicIaC resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ChallengeDynamicIaCState, opts?: pulumi.CustomResourceOptions): ChallengeDynamicIaC {
        return new ChallengeDynamicIaC(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'ctfdcm:index/challengeDynamicIaC:ChallengeDynamicIaC';

    /**
     * Returns true if the given object is an instance of ChallengeDynamicIaC.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ChallengeDynamicIaC {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ChallengeDynamicIaC.__pulumiType;
    }

    /**
     * An optional key=value map (both strings) to pass to the scenario.
     */
    public readonly additional!: pulumi.Output<{[key: string]: string}>;
    /**
     * Attribution to the creator(s) of the challenge.
     */
    public readonly attribution!: pulumi.Output<string | undefined>;
    /**
     * Category of the challenge that CTFd groups by on the web UI.
     */
    public readonly category!: pulumi.Output<string>;
    /**
     * Connection Information to connect to the challenge instance, useful for pwn, web and infrastructure pentests.
     */
    public readonly connectionInfo!: pulumi.Output<string>;
    /**
     * The decay defines from each number of solves does the decay function triggers until reaching minimum. This function is defined by CTFd and could be configured through `.function`.
     */
    public readonly decay!: pulumi.Output<number>;
    /**
     * Description of the challenge, consider using multiline descriptions for better style.
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * Whether to destroy the instance once flagged.
     */
    public readonly destroyOnFlag!: pulumi.Output<boolean>;
    /**
     * Decay function to define how the challenge value evolve through solves, either linear or logarithmic.
     */
    public readonly function!: pulumi.Output<string>;
    /**
     * The cost (in mana) of the challenge once an instance is deployed.
     */
    public readonly manaCost!: pulumi.Output<number>;
    /**
     * The number of instances after which not to pool anymore.
     */
    public readonly max!: pulumi.Output<number>;
    /**
     * Maximum amount of attempts before being unable to flag the challenge.
     */
    public readonly maxAttempts!: pulumi.Output<number>;
    /**
     * The minimum number of instances to set in the pool.
     */
    public readonly min!: pulumi.Output<number>;
    /**
     * The minimum points for a dynamic-score challenge to reach with the decay function. Once there, no solve could have more value.
     */
    public readonly minimum!: pulumi.Output<number>;
    /**
     * Name of the challenge, displayed as it.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Suggestion for the end-user as next challenge to work on.
     */
    public readonly next!: pulumi.Output<number | undefined>;
    /**
     * List of required challenges that needs to get flagged before this one being accessible. Useful for skill-trees-like strategy CTF.
     */
    public readonly requirements!: pulumi.Output<outputs.ChallengeDynamicIaCRequirements | undefined>;
    /**
     * The OCI reference to the scenario.
     */
    public readonly scenario!: pulumi.Output<string>;
    /**
     * Whether the instance will be shared between all players.
     */
    public readonly shared!: pulumi.Output<boolean>;
    /**
     * State of the challenge, either hidden or visible.
     */
    public readonly state!: pulumi.Output<string>;
    /**
     * List of challenge tags that will be displayed to the end-user. You could use them to give some quick insights of what a challenge involves.
     */
    public readonly tags!: pulumi.Output<string[]>;
    /**
     * The timeout (in seconds) after which the instance will be janitored.
     */
    public readonly timeout!: pulumi.Output<number | undefined>;
    /**
     * List of challenge topics that are displayed to the administrators for maintenance and planification.
     */
    public readonly topics!: pulumi.Output<string[]>;
    /**
     * The date until the instance could run before being janitored.
     */
    public readonly until!: pulumi.Output<string | undefined>;
    /**
     * The value (points) of the challenge once solved. It is mapped to `initial` under the hood, but displayed as `value` for consistency with the standard challenge.
     */
    public readonly value!: pulumi.Output<number>;

    /**
     * Create a ChallengeDynamicIaC resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ChallengeDynamicIaCArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ChallengeDynamicIaCArgs | ChallengeDynamicIaCState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ChallengeDynamicIaCState | undefined;
            resourceInputs["additional"] = state ? state.additional : undefined;
            resourceInputs["attribution"] = state ? state.attribution : undefined;
            resourceInputs["category"] = state ? state.category : undefined;
            resourceInputs["connectionInfo"] = state ? state.connectionInfo : undefined;
            resourceInputs["decay"] = state ? state.decay : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["destroyOnFlag"] = state ? state.destroyOnFlag : undefined;
            resourceInputs["function"] = state ? state.function : undefined;
            resourceInputs["manaCost"] = state ? state.manaCost : undefined;
            resourceInputs["max"] = state ? state.max : undefined;
            resourceInputs["maxAttempts"] = state ? state.maxAttempts : undefined;
            resourceInputs["min"] = state ? state.min : undefined;
            resourceInputs["minimum"] = state ? state.minimum : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["next"] = state ? state.next : undefined;
            resourceInputs["requirements"] = state ? state.requirements : undefined;
            resourceInputs["scenario"] = state ? state.scenario : undefined;
            resourceInputs["shared"] = state ? state.shared : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["timeout"] = state ? state.timeout : undefined;
            resourceInputs["topics"] = state ? state.topics : undefined;
            resourceInputs["until"] = state ? state.until : undefined;
            resourceInputs["value"] = state ? state.value : undefined;
        } else {
            const args = argsOrState as ChallengeDynamicIaCArgs | undefined;
            if ((!args || args.category === undefined) && !opts.urn) {
                throw new Error("Missing required property 'category'");
            }
            if ((!args || args.decay === undefined) && !opts.urn) {
                throw new Error("Missing required property 'decay'");
            }
            if ((!args || args.description === undefined) && !opts.urn) {
                throw new Error("Missing required property 'description'");
            }
            if ((!args || args.minimum === undefined) && !opts.urn) {
                throw new Error("Missing required property 'minimum'");
            }
            if ((!args || args.scenario === undefined) && !opts.urn) {
                throw new Error("Missing required property 'scenario'");
            }
            if ((!args || args.value === undefined) && !opts.urn) {
                throw new Error("Missing required property 'value'");
            }
            resourceInputs["additional"] = args ? args.additional : undefined;
            resourceInputs["attribution"] = args ? args.attribution : undefined;
            resourceInputs["category"] = args ? args.category : undefined;
            resourceInputs["connectionInfo"] = args ? args.connectionInfo : undefined;
            resourceInputs["decay"] = args ? args.decay : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["destroyOnFlag"] = args ? args.destroyOnFlag : undefined;
            resourceInputs["function"] = args ? args.function : undefined;
            resourceInputs["manaCost"] = args ? args.manaCost : undefined;
            resourceInputs["max"] = args ? args.max : undefined;
            resourceInputs["maxAttempts"] = args ? args.maxAttempts : undefined;
            resourceInputs["min"] = args ? args.min : undefined;
            resourceInputs["minimum"] = args ? args.minimum : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["next"] = args ? args.next : undefined;
            resourceInputs["requirements"] = args ? args.requirements : undefined;
            resourceInputs["scenario"] = args ? args.scenario : undefined;
            resourceInputs["shared"] = args ? args.shared : undefined;
            resourceInputs["state"] = args ? args.state : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["timeout"] = args ? args.timeout : undefined;
            resourceInputs["topics"] = args ? args.topics : undefined;
            resourceInputs["until"] = args ? args.until : undefined;
            resourceInputs["value"] = args ? args.value : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ChallengeDynamicIaC.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ChallengeDynamicIaC resources.
 */
export interface ChallengeDynamicIaCState {
    /**
     * An optional key=value map (both strings) to pass to the scenario.
     */
    additional?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Attribution to the creator(s) of the challenge.
     */
    attribution?: pulumi.Input<string>;
    /**
     * Category of the challenge that CTFd groups by on the web UI.
     */
    category?: pulumi.Input<string>;
    /**
     * Connection Information to connect to the challenge instance, useful for pwn, web and infrastructure pentests.
     */
    connectionInfo?: pulumi.Input<string>;
    /**
     * The decay defines from each number of solves does the decay function triggers until reaching minimum. This function is defined by CTFd and could be configured through `.function`.
     */
    decay?: pulumi.Input<number>;
    /**
     * Description of the challenge, consider using multiline descriptions for better style.
     */
    description?: pulumi.Input<string>;
    /**
     * Whether to destroy the instance once flagged.
     */
    destroyOnFlag?: pulumi.Input<boolean>;
    /**
     * Decay function to define how the challenge value evolve through solves, either linear or logarithmic.
     */
    function?: pulumi.Input<string>;
    /**
     * The cost (in mana) of the challenge once an instance is deployed.
     */
    manaCost?: pulumi.Input<number>;
    /**
     * The number of instances after which not to pool anymore.
     */
    max?: pulumi.Input<number>;
    /**
     * Maximum amount of attempts before being unable to flag the challenge.
     */
    maxAttempts?: pulumi.Input<number>;
    /**
     * The minimum number of instances to set in the pool.
     */
    min?: pulumi.Input<number>;
    /**
     * The minimum points for a dynamic-score challenge to reach with the decay function. Once there, no solve could have more value.
     */
    minimum?: pulumi.Input<number>;
    /**
     * Name of the challenge, displayed as it.
     */
    name?: pulumi.Input<string>;
    /**
     * Suggestion for the end-user as next challenge to work on.
     */
    next?: pulumi.Input<number>;
    /**
     * List of required challenges that needs to get flagged before this one being accessible. Useful for skill-trees-like strategy CTF.
     */
    requirements?: pulumi.Input<inputs.ChallengeDynamicIaCRequirements>;
    /**
     * The OCI reference to the scenario.
     */
    scenario?: pulumi.Input<string>;
    /**
     * Whether the instance will be shared between all players.
     */
    shared?: pulumi.Input<boolean>;
    /**
     * State of the challenge, either hidden or visible.
     */
    state?: pulumi.Input<string>;
    /**
     * List of challenge tags that will be displayed to the end-user. You could use them to give some quick insights of what a challenge involves.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The timeout (in seconds) after which the instance will be janitored.
     */
    timeout?: pulumi.Input<number>;
    /**
     * List of challenge topics that are displayed to the administrators for maintenance and planification.
     */
    topics?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The date until the instance could run before being janitored.
     */
    until?: pulumi.Input<string>;
    /**
     * The value (points) of the challenge once solved. It is mapped to `initial` under the hood, but displayed as `value` for consistency with the standard challenge.
     */
    value?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a ChallengeDynamicIaC resource.
 */
export interface ChallengeDynamicIaCArgs {
    /**
     * An optional key=value map (both strings) to pass to the scenario.
     */
    additional?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Attribution to the creator(s) of the challenge.
     */
    attribution?: pulumi.Input<string>;
    /**
     * Category of the challenge that CTFd groups by on the web UI.
     */
    category: pulumi.Input<string>;
    /**
     * Connection Information to connect to the challenge instance, useful for pwn, web and infrastructure pentests.
     */
    connectionInfo?: pulumi.Input<string>;
    /**
     * The decay defines from each number of solves does the decay function triggers until reaching minimum. This function is defined by CTFd and could be configured through `.function`.
     */
    decay: pulumi.Input<number>;
    /**
     * Description of the challenge, consider using multiline descriptions for better style.
     */
    description: pulumi.Input<string>;
    /**
     * Whether to destroy the instance once flagged.
     */
    destroyOnFlag?: pulumi.Input<boolean>;
    /**
     * Decay function to define how the challenge value evolve through solves, either linear or logarithmic.
     */
    function?: pulumi.Input<string>;
    /**
     * The cost (in mana) of the challenge once an instance is deployed.
     */
    manaCost?: pulumi.Input<number>;
    /**
     * The number of instances after which not to pool anymore.
     */
    max?: pulumi.Input<number>;
    /**
     * Maximum amount of attempts before being unable to flag the challenge.
     */
    maxAttempts?: pulumi.Input<number>;
    /**
     * The minimum number of instances to set in the pool.
     */
    min?: pulumi.Input<number>;
    /**
     * The minimum points for a dynamic-score challenge to reach with the decay function. Once there, no solve could have more value.
     */
    minimum: pulumi.Input<number>;
    /**
     * Name of the challenge, displayed as it.
     */
    name?: pulumi.Input<string>;
    /**
     * Suggestion for the end-user as next challenge to work on.
     */
    next?: pulumi.Input<number>;
    /**
     * List of required challenges that needs to get flagged before this one being accessible. Useful for skill-trees-like strategy CTF.
     */
    requirements?: pulumi.Input<inputs.ChallengeDynamicIaCRequirements>;
    /**
     * The OCI reference to the scenario.
     */
    scenario: pulumi.Input<string>;
    /**
     * Whether the instance will be shared between all players.
     */
    shared?: pulumi.Input<boolean>;
    /**
     * State of the challenge, either hidden or visible.
     */
    state?: pulumi.Input<string>;
    /**
     * List of challenge tags that will be displayed to the end-user. You could use them to give some quick insights of what a challenge involves.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The timeout (in seconds) after which the instance will be janitored.
     */
    timeout?: pulumi.Input<number>;
    /**
     * List of challenge topics that are displayed to the administrators for maintenance and planification.
     */
    topics?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The date until the instance could run before being janitored.
     */
    until?: pulumi.Input<string>;
    /**
     * The value (points) of the challenge once solved. It is mapped to `initial` under the hood, but displayed as `value` for consistency with the standard challenge.
     */
    value: pulumi.Input<number>;
}
