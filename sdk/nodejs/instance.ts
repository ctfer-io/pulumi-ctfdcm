// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * CTFd is built around the Challenge resource, which contains all the attributes to define a part of the Capture The Flag event.
 *
 * This implementation has support of On Demand infrastructures through [Chall-Manager](https://github.com/ctfer-io/chall-manager).
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as ctfd from "@ctfer-io/pulumi-ctfd";
 * import * as ctfdcm from "@ctfer-io/pulumi-ctfdcm";
 *
 * const chall = new ctfdcm.ChallengeDynamicIaC("chall", {
 *     category: "cat",
 *     description: "...",
 *     value: 500,
 *     decay: 20,
 *     minimum: 50,
 *     state: "visible",
 *     shared: true,
 *     scenario: "localhost:5000/some/scenario:v0.1.0",
 * });
 * const pandatix = new ctfd.User("pandatix", {
 *     email: "lucastesson@protonmail.com",
 *     password: "password",
 * });
 * const ctfer = new ctfd.Team("ctfer", {
 *     email: "ctfer-io@protonmail.com",
 *     password: "ctfer",
 *     members: [pandatix.id],
 *     captain: pandatix.id,
 * });
 * const ist = new ctfdcm.Instance("ist", {
 *     challengeId: chall.id,
 *     sourceId: ctfer.id,
 * });
 * ```
 */
export class Instance extends pulumi.CustomResource {
    /**
     * Get an existing Instance resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: InstanceState, opts?: pulumi.CustomResourceOptions): Instance {
        return new Instance(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'ctfdcm:index/instance:Instance';

    /**
     * Returns true if the given object is an instance of Instance.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Instance {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Instance.__pulumiType;
    }

    /**
     * The challenge to provision an instance of.
     */
    public readonly challengeId!: pulumi.Output<string>;
    /**
     * The source of whom to provision an instance for.
     */
    public readonly sourceId!: pulumi.Output<string>;

    /**
     * Create a Instance resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: InstanceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: InstanceArgs | InstanceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as InstanceState | undefined;
            resourceInputs["challengeId"] = state ? state.challengeId : undefined;
            resourceInputs["sourceId"] = state ? state.sourceId : undefined;
        } else {
            const args = argsOrState as InstanceArgs | undefined;
            if ((!args || args.challengeId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'challengeId'");
            }
            if ((!args || args.sourceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sourceId'");
            }
            resourceInputs["challengeId"] = args ? args.challengeId : undefined;
            resourceInputs["sourceId"] = args ? args.sourceId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Instance.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Instance resources.
 */
export interface InstanceState {
    /**
     * The challenge to provision an instance of.
     */
    challengeId?: pulumi.Input<string>;
    /**
     * The source of whom to provision an instance for.
     */
    sourceId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Instance resource.
 */
export interface InstanceArgs {
    /**
     * The challenge to provision an instance of.
     */
    challengeId: pulumi.Input<string>;
    /**
     * The source of whom to provision an instance for.
     */
    sourceId: pulumi.Input<string>;
}
