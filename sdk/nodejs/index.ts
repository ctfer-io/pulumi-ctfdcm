// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { ChallengeDynamicIaCArgs, ChallengeDynamicIaCState } from "./challengeDynamicIaC";
export type ChallengeDynamicIaC = import("./challengeDynamicIaC").ChallengeDynamicIaC;
export const ChallengeDynamicIaC: typeof import("./challengeDynamicIaC").ChallengeDynamicIaC = null as any;
utilities.lazyLoad(exports, ["ChallengeDynamicIaC"], () => require("./challengeDynamicIaC"));

export { GetChallengesDynamiciacResult } from "./getChallengesDynamiciac";
export const getChallengesDynamiciac: typeof import("./getChallengesDynamiciac").getChallengesDynamiciac = null as any;
export const getChallengesDynamiciacOutput: typeof import("./getChallengesDynamiciac").getChallengesDynamiciacOutput = null as any;
utilities.lazyLoad(exports, ["getChallengesDynamiciac","getChallengesDynamiciacOutput"], () => require("./getChallengesDynamiciac"));

export { InstanceArgs, InstanceState } from "./instance";
export type Instance = import("./instance").Instance;
export const Instance: typeof import("./instance").Instance = null as any;
utilities.lazyLoad(exports, ["Instance"], () => require("./instance"));

export * from "./provider";
import { Provider } from "./provider";


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "ctfdcm:index/challengeDynamicIaC:ChallengeDynamicIaC":
                return new ChallengeDynamicIaC(name, <any>undefined, { urn })
            case "ctfdcm:index/instance:Instance":
                return new Instance(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("ctfdcm", "index/challengeDynamicIaC", _module)
pulumi.runtime.registerResourceModule("ctfdcm", "index/instance", _module)
pulumi.runtime.registerResourcePackage("ctfdcm", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:ctfdcm") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
