// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ctfdcm

import (
	"context"
	"reflect"

	"github.com/ctfer-io/pulumi-ctfdcm/sdk/go/ctfdcm/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func GetChallengesDynamiciac(ctx *pulumi.Context, opts ...pulumi.InvokeOption) (*GetChallengesDynamiciacResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetChallengesDynamiciacResult
	err := ctx.Invoke("ctfdcm:index/getChallengesDynamiciac:getChallengesDynamiciac", nil, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of values returned by getChallengesDynamiciac.
type GetChallengesDynamiciacResult struct {
	Challenges []GetChallengesDynamiciacChallenge `pulumi:"challenges"`
	// The ID of this resource.
	Id string `pulumi:"id"`
}

func GetChallengesDynamiciacOutput(ctx *pulumi.Context, opts ...pulumi.InvokeOption) GetChallengesDynamiciacResultOutput {
	return pulumi.ToOutput(0).ApplyT(func(int) (GetChallengesDynamiciacResultOutput, error) {
		options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
		return ctx.InvokeOutput("ctfdcm:index/getChallengesDynamiciac:getChallengesDynamiciac", nil, GetChallengesDynamiciacResultOutput{}, options).(GetChallengesDynamiciacResultOutput), nil
	}).(GetChallengesDynamiciacResultOutput)
}

// A collection of values returned by getChallengesDynamiciac.
type GetChallengesDynamiciacResultOutput struct{ *pulumi.OutputState }

func (GetChallengesDynamiciacResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetChallengesDynamiciacResult)(nil)).Elem()
}

func (o GetChallengesDynamiciacResultOutput) ToGetChallengesDynamiciacResultOutput() GetChallengesDynamiciacResultOutput {
	return o
}

func (o GetChallengesDynamiciacResultOutput) ToGetChallengesDynamiciacResultOutputWithContext(ctx context.Context) GetChallengesDynamiciacResultOutput {
	return o
}

func (o GetChallengesDynamiciacResultOutput) Challenges() GetChallengesDynamiciacChallengeArrayOutput {
	return o.ApplyT(func(v GetChallengesDynamiciacResult) []GetChallengesDynamiciacChallenge { return v.Challenges }).(GetChallengesDynamiciacChallengeArrayOutput)
}

// The ID of this resource.
func (o GetChallengesDynamiciacResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetChallengesDynamiciacResult) string { return v.Id }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(GetChallengesDynamiciacResultOutput{})
}
