// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ctfdcm

import (
	"context"
	"reflect"

	"errors"
	"github.com/ctfer-io/pulumi-ctfdcm/sdk/go/ctfdcm/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// CTFd is built around the Challenge resource, which contains all the attributes to define a part of the Capture The Flag event.
//
// This implementation has support of On Demand infrastructures through [Chall-Manager](https://github.com/ctfer-io/chall-manager).
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/ctfer-io/pulumi-ctfd/sdk/v2/go/ctfd"
//	"github.com/ctfer-io/pulumi-ctfdcm/sdk/go/ctfdcm"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			http, err := ctfdcm.NewChallengeDynamicIaC(ctx, "http", &ctfdcm.ChallengeDynamicIaCArgs{
//				Category:      pulumi.String("misc"),
//				Description:   pulumi.String("..."),
//				Value:         pulumi.Int(500),
//				Decay:         pulumi.Int(100),
//				Minimum:       pulumi.Int(50),
//				State:         pulumi.String("visible"),
//				Function:      pulumi.String("logarithmic"),
//				Shared:        pulumi.Bool(true),
//				DestroyOnFlag: pulumi.Bool(true),
//				ManaCost:      pulumi.Int(1),
//				Scenario:      pulumi.String("localhost:5000/some/scenario:v0.1.0"),
//				Timeout:       pulumi.Int(600),
//				Topics: pulumi.StringArray{
//					pulumi.String("Misc"),
//				},
//				Tags: pulumi.StringArray{
//					pulumi.String("misc"),
//					pulumi.String("basic"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = ctfd.NewFlag(ctx, "httpFlag", &ctfd.FlagArgs{
//				ChallengeId: http.ID(),
//				Content:     pulumi.String("CTF{some_flag}"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type ChallengeDynamicIaC struct {
	pulumi.CustomResourceState

	// An optional key=value map (both strings) to pass to the scenario.
	Additional pulumi.StringMapOutput `pulumi:"additional"`
	// Attribution to the creator(s) of the challenge.
	Attribution pulumi.StringPtrOutput `pulumi:"attribution"`
	// Category of the challenge that CTFd groups by on the web UI.
	Category pulumi.StringOutput `pulumi:"category"`
	// Connection Information to connect to the challenge instance, useful for pwn, web and infrastructure pentests.
	ConnectionInfo pulumi.StringOutput `pulumi:"connectionInfo"`
	// The decay defines from each number of solves does the decay function triggers until reaching minimum. This function is defined by CTFd and could be configured through `.function`.
	Decay pulumi.IntOutput `pulumi:"decay"`
	// Description of the challenge, consider using multiline descriptions for better style.
	Description pulumi.StringOutput `pulumi:"description"`
	// Whether to destroy the instance once flagged.
	DestroyOnFlag pulumi.BoolOutput `pulumi:"destroyOnFlag"`
	// Decay function to define how the challenge value evolve through solves, either linear or logarithmic.
	Function pulumi.StringOutput `pulumi:"function"`
	// The cost (in mana) of the challenge once an instance is deployed.
	ManaCost pulumi.IntOutput `pulumi:"manaCost"`
	// The number of instances after which not to pool anymore.
	Max pulumi.IntOutput `pulumi:"max"`
	// Maximum amount of attempts before being unable to flag the challenge.
	MaxAttempts pulumi.IntOutput `pulumi:"maxAttempts"`
	// The minimum number of instances to set in the pool.
	Min pulumi.IntOutput `pulumi:"min"`
	// The minimum points for a dynamic-score challenge to reach with the decay function. Once there, no solve could have more value.
	Minimum pulumi.IntOutput `pulumi:"minimum"`
	// Name of the challenge, displayed as it.
	Name pulumi.StringOutput `pulumi:"name"`
	// Suggestion for the end-user as next challenge to work on.
	Next pulumi.IntPtrOutput `pulumi:"next"`
	// List of required challenges that needs to get flagged before this one being accessible. Useful for skill-trees-like strategy CTF.
	Requirements ChallengeDynamicIaCRequirementsPtrOutput `pulumi:"requirements"`
	// The OCI reference to the scenario.
	Scenario pulumi.StringOutput `pulumi:"scenario"`
	// Whether the instance will be shared between all players.
	Shared pulumi.BoolOutput `pulumi:"shared"`
	// State of the challenge, either hidden or visible.
	State pulumi.StringOutput `pulumi:"state"`
	// List of challenge tags that will be displayed to the end-user. You could use them to give some quick insights of what a challenge involves.
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
	// The timeout (in seconds) after which the instance will be janitored.
	Timeout pulumi.IntOutput `pulumi:"timeout"`
	// List of challenge topics that are displayed to the administrators for maintenance and planification.
	Topics pulumi.StringArrayOutput `pulumi:"topics"`
	// The date until the instance could run before being janitored.
	Until pulumi.StringOutput `pulumi:"until"`
	// The value (points) of the challenge once solved. It is mapped to `initial` under the hood, but displayed as `value` for consistency with the standard challenge.
	Value pulumi.IntOutput `pulumi:"value"`
}

// NewChallengeDynamicIaC registers a new resource with the given unique name, arguments, and options.
func NewChallengeDynamicIaC(ctx *pulumi.Context,
	name string, args *ChallengeDynamicIaCArgs, opts ...pulumi.ResourceOption) (*ChallengeDynamicIaC, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Category == nil {
		return nil, errors.New("invalid value for required argument 'Category'")
	}
	if args.Decay == nil {
		return nil, errors.New("invalid value for required argument 'Decay'")
	}
	if args.Description == nil {
		return nil, errors.New("invalid value for required argument 'Description'")
	}
	if args.Minimum == nil {
		return nil, errors.New("invalid value for required argument 'Minimum'")
	}
	if args.Scenario == nil {
		return nil, errors.New("invalid value for required argument 'Scenario'")
	}
	if args.Value == nil {
		return nil, errors.New("invalid value for required argument 'Value'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ChallengeDynamicIaC
	err := ctx.RegisterResource("ctfdcm:index/challengeDynamicIaC:ChallengeDynamicIaC", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetChallengeDynamicIaC gets an existing ChallengeDynamicIaC resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetChallengeDynamicIaC(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ChallengeDynamicIaCState, opts ...pulumi.ResourceOption) (*ChallengeDynamicIaC, error) {
	var resource ChallengeDynamicIaC
	err := ctx.ReadResource("ctfdcm:index/challengeDynamicIaC:ChallengeDynamicIaC", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ChallengeDynamicIaC resources.
type challengeDynamicIaCState struct {
	// An optional key=value map (both strings) to pass to the scenario.
	Additional map[string]string `pulumi:"additional"`
	// Attribution to the creator(s) of the challenge.
	Attribution *string `pulumi:"attribution"`
	// Category of the challenge that CTFd groups by on the web UI.
	Category *string `pulumi:"category"`
	// Connection Information to connect to the challenge instance, useful for pwn, web and infrastructure pentests.
	ConnectionInfo *string `pulumi:"connectionInfo"`
	// The decay defines from each number of solves does the decay function triggers until reaching minimum. This function is defined by CTFd and could be configured through `.function`.
	Decay *int `pulumi:"decay"`
	// Description of the challenge, consider using multiline descriptions for better style.
	Description *string `pulumi:"description"`
	// Whether to destroy the instance once flagged.
	DestroyOnFlag *bool `pulumi:"destroyOnFlag"`
	// Decay function to define how the challenge value evolve through solves, either linear or logarithmic.
	Function *string `pulumi:"function"`
	// The cost (in mana) of the challenge once an instance is deployed.
	ManaCost *int `pulumi:"manaCost"`
	// The number of instances after which not to pool anymore.
	Max *int `pulumi:"max"`
	// Maximum amount of attempts before being unable to flag the challenge.
	MaxAttempts *int `pulumi:"maxAttempts"`
	// The minimum number of instances to set in the pool.
	Min *int `pulumi:"min"`
	// The minimum points for a dynamic-score challenge to reach with the decay function. Once there, no solve could have more value.
	Minimum *int `pulumi:"minimum"`
	// Name of the challenge, displayed as it.
	Name *string `pulumi:"name"`
	// Suggestion for the end-user as next challenge to work on.
	Next *int `pulumi:"next"`
	// List of required challenges that needs to get flagged before this one being accessible. Useful for skill-trees-like strategy CTF.
	Requirements *ChallengeDynamicIaCRequirements `pulumi:"requirements"`
	// The OCI reference to the scenario.
	Scenario *string `pulumi:"scenario"`
	// Whether the instance will be shared between all players.
	Shared *bool `pulumi:"shared"`
	// State of the challenge, either hidden or visible.
	State *string `pulumi:"state"`
	// List of challenge tags that will be displayed to the end-user. You could use them to give some quick insights of what a challenge involves.
	Tags []string `pulumi:"tags"`
	// The timeout (in seconds) after which the instance will be janitored.
	Timeout *int `pulumi:"timeout"`
	// List of challenge topics that are displayed to the administrators for maintenance and planification.
	Topics []string `pulumi:"topics"`
	// The date until the instance could run before being janitored.
	Until *string `pulumi:"until"`
	// The value (points) of the challenge once solved. It is mapped to `initial` under the hood, but displayed as `value` for consistency with the standard challenge.
	Value *int `pulumi:"value"`
}

type ChallengeDynamicIaCState struct {
	// An optional key=value map (both strings) to pass to the scenario.
	Additional pulumi.StringMapInput
	// Attribution to the creator(s) of the challenge.
	Attribution pulumi.StringPtrInput
	// Category of the challenge that CTFd groups by on the web UI.
	Category pulumi.StringPtrInput
	// Connection Information to connect to the challenge instance, useful for pwn, web and infrastructure pentests.
	ConnectionInfo pulumi.StringPtrInput
	// The decay defines from each number of solves does the decay function triggers until reaching minimum. This function is defined by CTFd and could be configured through `.function`.
	Decay pulumi.IntPtrInput
	// Description of the challenge, consider using multiline descriptions for better style.
	Description pulumi.StringPtrInput
	// Whether to destroy the instance once flagged.
	DestroyOnFlag pulumi.BoolPtrInput
	// Decay function to define how the challenge value evolve through solves, either linear or logarithmic.
	Function pulumi.StringPtrInput
	// The cost (in mana) of the challenge once an instance is deployed.
	ManaCost pulumi.IntPtrInput
	// The number of instances after which not to pool anymore.
	Max pulumi.IntPtrInput
	// Maximum amount of attempts before being unable to flag the challenge.
	MaxAttempts pulumi.IntPtrInput
	// The minimum number of instances to set in the pool.
	Min pulumi.IntPtrInput
	// The minimum points for a dynamic-score challenge to reach with the decay function. Once there, no solve could have more value.
	Minimum pulumi.IntPtrInput
	// Name of the challenge, displayed as it.
	Name pulumi.StringPtrInput
	// Suggestion for the end-user as next challenge to work on.
	Next pulumi.IntPtrInput
	// List of required challenges that needs to get flagged before this one being accessible. Useful for skill-trees-like strategy CTF.
	Requirements ChallengeDynamicIaCRequirementsPtrInput
	// The OCI reference to the scenario.
	Scenario pulumi.StringPtrInput
	// Whether the instance will be shared between all players.
	Shared pulumi.BoolPtrInput
	// State of the challenge, either hidden or visible.
	State pulumi.StringPtrInput
	// List of challenge tags that will be displayed to the end-user. You could use them to give some quick insights of what a challenge involves.
	Tags pulumi.StringArrayInput
	// The timeout (in seconds) after which the instance will be janitored.
	Timeout pulumi.IntPtrInput
	// List of challenge topics that are displayed to the administrators for maintenance and planification.
	Topics pulumi.StringArrayInput
	// The date until the instance could run before being janitored.
	Until pulumi.StringPtrInput
	// The value (points) of the challenge once solved. It is mapped to `initial` under the hood, but displayed as `value` for consistency with the standard challenge.
	Value pulumi.IntPtrInput
}

func (ChallengeDynamicIaCState) ElementType() reflect.Type {
	return reflect.TypeOf((*challengeDynamicIaCState)(nil)).Elem()
}

type challengeDynamicIaCArgs struct {
	// An optional key=value map (both strings) to pass to the scenario.
	Additional map[string]string `pulumi:"additional"`
	// Attribution to the creator(s) of the challenge.
	Attribution *string `pulumi:"attribution"`
	// Category of the challenge that CTFd groups by on the web UI.
	Category string `pulumi:"category"`
	// Connection Information to connect to the challenge instance, useful for pwn, web and infrastructure pentests.
	ConnectionInfo *string `pulumi:"connectionInfo"`
	// The decay defines from each number of solves does the decay function triggers until reaching minimum. This function is defined by CTFd and could be configured through `.function`.
	Decay int `pulumi:"decay"`
	// Description of the challenge, consider using multiline descriptions for better style.
	Description string `pulumi:"description"`
	// Whether to destroy the instance once flagged.
	DestroyOnFlag *bool `pulumi:"destroyOnFlag"`
	// Decay function to define how the challenge value evolve through solves, either linear or logarithmic.
	Function *string `pulumi:"function"`
	// The cost (in mana) of the challenge once an instance is deployed.
	ManaCost *int `pulumi:"manaCost"`
	// The number of instances after which not to pool anymore.
	Max *int `pulumi:"max"`
	// Maximum amount of attempts before being unable to flag the challenge.
	MaxAttempts *int `pulumi:"maxAttempts"`
	// The minimum number of instances to set in the pool.
	Min *int `pulumi:"min"`
	// The minimum points for a dynamic-score challenge to reach with the decay function. Once there, no solve could have more value.
	Minimum int `pulumi:"minimum"`
	// Name of the challenge, displayed as it.
	Name *string `pulumi:"name"`
	// Suggestion for the end-user as next challenge to work on.
	Next *int `pulumi:"next"`
	// List of required challenges that needs to get flagged before this one being accessible. Useful for skill-trees-like strategy CTF.
	Requirements *ChallengeDynamicIaCRequirements `pulumi:"requirements"`
	// The OCI reference to the scenario.
	Scenario string `pulumi:"scenario"`
	// Whether the instance will be shared between all players.
	Shared *bool `pulumi:"shared"`
	// State of the challenge, either hidden or visible.
	State *string `pulumi:"state"`
	// List of challenge tags that will be displayed to the end-user. You could use them to give some quick insights of what a challenge involves.
	Tags []string `pulumi:"tags"`
	// The timeout (in seconds) after which the instance will be janitored.
	Timeout *int `pulumi:"timeout"`
	// List of challenge topics that are displayed to the administrators for maintenance and planification.
	Topics []string `pulumi:"topics"`
	// The date until the instance could run before being janitored.
	Until *string `pulumi:"until"`
	// The value (points) of the challenge once solved. It is mapped to `initial` under the hood, but displayed as `value` for consistency with the standard challenge.
	Value int `pulumi:"value"`
}

// The set of arguments for constructing a ChallengeDynamicIaC resource.
type ChallengeDynamicIaCArgs struct {
	// An optional key=value map (both strings) to pass to the scenario.
	Additional pulumi.StringMapInput
	// Attribution to the creator(s) of the challenge.
	Attribution pulumi.StringPtrInput
	// Category of the challenge that CTFd groups by on the web UI.
	Category pulumi.StringInput
	// Connection Information to connect to the challenge instance, useful for pwn, web and infrastructure pentests.
	ConnectionInfo pulumi.StringPtrInput
	// The decay defines from each number of solves does the decay function triggers until reaching minimum. This function is defined by CTFd and could be configured through `.function`.
	Decay pulumi.IntInput
	// Description of the challenge, consider using multiline descriptions for better style.
	Description pulumi.StringInput
	// Whether to destroy the instance once flagged.
	DestroyOnFlag pulumi.BoolPtrInput
	// Decay function to define how the challenge value evolve through solves, either linear or logarithmic.
	Function pulumi.StringPtrInput
	// The cost (in mana) of the challenge once an instance is deployed.
	ManaCost pulumi.IntPtrInput
	// The number of instances after which not to pool anymore.
	Max pulumi.IntPtrInput
	// Maximum amount of attempts before being unable to flag the challenge.
	MaxAttempts pulumi.IntPtrInput
	// The minimum number of instances to set in the pool.
	Min pulumi.IntPtrInput
	// The minimum points for a dynamic-score challenge to reach with the decay function. Once there, no solve could have more value.
	Minimum pulumi.IntInput
	// Name of the challenge, displayed as it.
	Name pulumi.StringPtrInput
	// Suggestion for the end-user as next challenge to work on.
	Next pulumi.IntPtrInput
	// List of required challenges that needs to get flagged before this one being accessible. Useful for skill-trees-like strategy CTF.
	Requirements ChallengeDynamicIaCRequirementsPtrInput
	// The OCI reference to the scenario.
	Scenario pulumi.StringInput
	// Whether the instance will be shared between all players.
	Shared pulumi.BoolPtrInput
	// State of the challenge, either hidden or visible.
	State pulumi.StringPtrInput
	// List of challenge tags that will be displayed to the end-user. You could use them to give some quick insights of what a challenge involves.
	Tags pulumi.StringArrayInput
	// The timeout (in seconds) after which the instance will be janitored.
	Timeout pulumi.IntPtrInput
	// List of challenge topics that are displayed to the administrators for maintenance and planification.
	Topics pulumi.StringArrayInput
	// The date until the instance could run before being janitored.
	Until pulumi.StringPtrInput
	// The value (points) of the challenge once solved. It is mapped to `initial` under the hood, but displayed as `value` for consistency with the standard challenge.
	Value pulumi.IntInput
}

func (ChallengeDynamicIaCArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*challengeDynamicIaCArgs)(nil)).Elem()
}

type ChallengeDynamicIaCInput interface {
	pulumi.Input

	ToChallengeDynamicIaCOutput() ChallengeDynamicIaCOutput
	ToChallengeDynamicIaCOutputWithContext(ctx context.Context) ChallengeDynamicIaCOutput
}

func (*ChallengeDynamicIaC) ElementType() reflect.Type {
	return reflect.TypeOf((**ChallengeDynamicIaC)(nil)).Elem()
}

func (i *ChallengeDynamicIaC) ToChallengeDynamicIaCOutput() ChallengeDynamicIaCOutput {
	return i.ToChallengeDynamicIaCOutputWithContext(context.Background())
}

func (i *ChallengeDynamicIaC) ToChallengeDynamicIaCOutputWithContext(ctx context.Context) ChallengeDynamicIaCOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChallengeDynamicIaCOutput)
}

// ChallengeDynamicIaCArrayInput is an input type that accepts ChallengeDynamicIaCArray and ChallengeDynamicIaCArrayOutput values.
// You can construct a concrete instance of `ChallengeDynamicIaCArrayInput` via:
//
//	ChallengeDynamicIaCArray{ ChallengeDynamicIaCArgs{...} }
type ChallengeDynamicIaCArrayInput interface {
	pulumi.Input

	ToChallengeDynamicIaCArrayOutput() ChallengeDynamicIaCArrayOutput
	ToChallengeDynamicIaCArrayOutputWithContext(context.Context) ChallengeDynamicIaCArrayOutput
}

type ChallengeDynamicIaCArray []ChallengeDynamicIaCInput

func (ChallengeDynamicIaCArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ChallengeDynamicIaC)(nil)).Elem()
}

func (i ChallengeDynamicIaCArray) ToChallengeDynamicIaCArrayOutput() ChallengeDynamicIaCArrayOutput {
	return i.ToChallengeDynamicIaCArrayOutputWithContext(context.Background())
}

func (i ChallengeDynamicIaCArray) ToChallengeDynamicIaCArrayOutputWithContext(ctx context.Context) ChallengeDynamicIaCArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChallengeDynamicIaCArrayOutput)
}

// ChallengeDynamicIaCMapInput is an input type that accepts ChallengeDynamicIaCMap and ChallengeDynamicIaCMapOutput values.
// You can construct a concrete instance of `ChallengeDynamicIaCMapInput` via:
//
//	ChallengeDynamicIaCMap{ "key": ChallengeDynamicIaCArgs{...} }
type ChallengeDynamicIaCMapInput interface {
	pulumi.Input

	ToChallengeDynamicIaCMapOutput() ChallengeDynamicIaCMapOutput
	ToChallengeDynamicIaCMapOutputWithContext(context.Context) ChallengeDynamicIaCMapOutput
}

type ChallengeDynamicIaCMap map[string]ChallengeDynamicIaCInput

func (ChallengeDynamicIaCMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ChallengeDynamicIaC)(nil)).Elem()
}

func (i ChallengeDynamicIaCMap) ToChallengeDynamicIaCMapOutput() ChallengeDynamicIaCMapOutput {
	return i.ToChallengeDynamicIaCMapOutputWithContext(context.Background())
}

func (i ChallengeDynamicIaCMap) ToChallengeDynamicIaCMapOutputWithContext(ctx context.Context) ChallengeDynamicIaCMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChallengeDynamicIaCMapOutput)
}

type ChallengeDynamicIaCOutput struct{ *pulumi.OutputState }

func (ChallengeDynamicIaCOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ChallengeDynamicIaC)(nil)).Elem()
}

func (o ChallengeDynamicIaCOutput) ToChallengeDynamicIaCOutput() ChallengeDynamicIaCOutput {
	return o
}

func (o ChallengeDynamicIaCOutput) ToChallengeDynamicIaCOutputWithContext(ctx context.Context) ChallengeDynamicIaCOutput {
	return o
}

// An optional key=value map (both strings) to pass to the scenario.
func (o ChallengeDynamicIaCOutput) Additional() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ChallengeDynamicIaC) pulumi.StringMapOutput { return v.Additional }).(pulumi.StringMapOutput)
}

// Attribution to the creator(s) of the challenge.
func (o ChallengeDynamicIaCOutput) Attribution() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ChallengeDynamicIaC) pulumi.StringPtrOutput { return v.Attribution }).(pulumi.StringPtrOutput)
}

// Category of the challenge that CTFd groups by on the web UI.
func (o ChallengeDynamicIaCOutput) Category() pulumi.StringOutput {
	return o.ApplyT(func(v *ChallengeDynamicIaC) pulumi.StringOutput { return v.Category }).(pulumi.StringOutput)
}

// Connection Information to connect to the challenge instance, useful for pwn, web and infrastructure pentests.
func (o ChallengeDynamicIaCOutput) ConnectionInfo() pulumi.StringOutput {
	return o.ApplyT(func(v *ChallengeDynamicIaC) pulumi.StringOutput { return v.ConnectionInfo }).(pulumi.StringOutput)
}

// The decay defines from each number of solves does the decay function triggers until reaching minimum. This function is defined by CTFd and could be configured through `.function`.
func (o ChallengeDynamicIaCOutput) Decay() pulumi.IntOutput {
	return o.ApplyT(func(v *ChallengeDynamicIaC) pulumi.IntOutput { return v.Decay }).(pulumi.IntOutput)
}

// Description of the challenge, consider using multiline descriptions for better style.
func (o ChallengeDynamicIaCOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *ChallengeDynamicIaC) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// Whether to destroy the instance once flagged.
func (o ChallengeDynamicIaCOutput) DestroyOnFlag() pulumi.BoolOutput {
	return o.ApplyT(func(v *ChallengeDynamicIaC) pulumi.BoolOutput { return v.DestroyOnFlag }).(pulumi.BoolOutput)
}

// Decay function to define how the challenge value evolve through solves, either linear or logarithmic.
func (o ChallengeDynamicIaCOutput) Function() pulumi.StringOutput {
	return o.ApplyT(func(v *ChallengeDynamicIaC) pulumi.StringOutput { return v.Function }).(pulumi.StringOutput)
}

// The cost (in mana) of the challenge once an instance is deployed.
func (o ChallengeDynamicIaCOutput) ManaCost() pulumi.IntOutput {
	return o.ApplyT(func(v *ChallengeDynamicIaC) pulumi.IntOutput { return v.ManaCost }).(pulumi.IntOutput)
}

// The number of instances after which not to pool anymore.
func (o ChallengeDynamicIaCOutput) Max() pulumi.IntOutput {
	return o.ApplyT(func(v *ChallengeDynamicIaC) pulumi.IntOutput { return v.Max }).(pulumi.IntOutput)
}

// Maximum amount of attempts before being unable to flag the challenge.
func (o ChallengeDynamicIaCOutput) MaxAttempts() pulumi.IntOutput {
	return o.ApplyT(func(v *ChallengeDynamicIaC) pulumi.IntOutput { return v.MaxAttempts }).(pulumi.IntOutput)
}

// The minimum number of instances to set in the pool.
func (o ChallengeDynamicIaCOutput) Min() pulumi.IntOutput {
	return o.ApplyT(func(v *ChallengeDynamicIaC) pulumi.IntOutput { return v.Min }).(pulumi.IntOutput)
}

// The minimum points for a dynamic-score challenge to reach with the decay function. Once there, no solve could have more value.
func (o ChallengeDynamicIaCOutput) Minimum() pulumi.IntOutput {
	return o.ApplyT(func(v *ChallengeDynamicIaC) pulumi.IntOutput { return v.Minimum }).(pulumi.IntOutput)
}

// Name of the challenge, displayed as it.
func (o ChallengeDynamicIaCOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ChallengeDynamicIaC) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Suggestion for the end-user as next challenge to work on.
func (o ChallengeDynamicIaCOutput) Next() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ChallengeDynamicIaC) pulumi.IntPtrOutput { return v.Next }).(pulumi.IntPtrOutput)
}

// List of required challenges that needs to get flagged before this one being accessible. Useful for skill-trees-like strategy CTF.
func (o ChallengeDynamicIaCOutput) Requirements() ChallengeDynamicIaCRequirementsPtrOutput {
	return o.ApplyT(func(v *ChallengeDynamicIaC) ChallengeDynamicIaCRequirementsPtrOutput { return v.Requirements }).(ChallengeDynamicIaCRequirementsPtrOutput)
}

// The OCI reference to the scenario.
func (o ChallengeDynamicIaCOutput) Scenario() pulumi.StringOutput {
	return o.ApplyT(func(v *ChallengeDynamicIaC) pulumi.StringOutput { return v.Scenario }).(pulumi.StringOutput)
}

// Whether the instance will be shared between all players.
func (o ChallengeDynamicIaCOutput) Shared() pulumi.BoolOutput {
	return o.ApplyT(func(v *ChallengeDynamicIaC) pulumi.BoolOutput { return v.Shared }).(pulumi.BoolOutput)
}

// State of the challenge, either hidden or visible.
func (o ChallengeDynamicIaCOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *ChallengeDynamicIaC) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// List of challenge tags that will be displayed to the end-user. You could use them to give some quick insights of what a challenge involves.
func (o ChallengeDynamicIaCOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ChallengeDynamicIaC) pulumi.StringArrayOutput { return v.Tags }).(pulumi.StringArrayOutput)
}

// The timeout (in seconds) after which the instance will be janitored.
func (o ChallengeDynamicIaCOutput) Timeout() pulumi.IntOutput {
	return o.ApplyT(func(v *ChallengeDynamicIaC) pulumi.IntOutput { return v.Timeout }).(pulumi.IntOutput)
}

// List of challenge topics that are displayed to the administrators for maintenance and planification.
func (o ChallengeDynamicIaCOutput) Topics() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ChallengeDynamicIaC) pulumi.StringArrayOutput { return v.Topics }).(pulumi.StringArrayOutput)
}

// The date until the instance could run before being janitored.
func (o ChallengeDynamicIaCOutput) Until() pulumi.StringOutput {
	return o.ApplyT(func(v *ChallengeDynamicIaC) pulumi.StringOutput { return v.Until }).(pulumi.StringOutput)
}

// The value (points) of the challenge once solved. It is mapped to `initial` under the hood, but displayed as `value` for consistency with the standard challenge.
func (o ChallengeDynamicIaCOutput) Value() pulumi.IntOutput {
	return o.ApplyT(func(v *ChallengeDynamicIaC) pulumi.IntOutput { return v.Value }).(pulumi.IntOutput)
}

type ChallengeDynamicIaCArrayOutput struct{ *pulumi.OutputState }

func (ChallengeDynamicIaCArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ChallengeDynamicIaC)(nil)).Elem()
}

func (o ChallengeDynamicIaCArrayOutput) ToChallengeDynamicIaCArrayOutput() ChallengeDynamicIaCArrayOutput {
	return o
}

func (o ChallengeDynamicIaCArrayOutput) ToChallengeDynamicIaCArrayOutputWithContext(ctx context.Context) ChallengeDynamicIaCArrayOutput {
	return o
}

func (o ChallengeDynamicIaCArrayOutput) Index(i pulumi.IntInput) ChallengeDynamicIaCOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ChallengeDynamicIaC {
		return vs[0].([]*ChallengeDynamicIaC)[vs[1].(int)]
	}).(ChallengeDynamicIaCOutput)
}

type ChallengeDynamicIaCMapOutput struct{ *pulumi.OutputState }

func (ChallengeDynamicIaCMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ChallengeDynamicIaC)(nil)).Elem()
}

func (o ChallengeDynamicIaCMapOutput) ToChallengeDynamicIaCMapOutput() ChallengeDynamicIaCMapOutput {
	return o
}

func (o ChallengeDynamicIaCMapOutput) ToChallengeDynamicIaCMapOutputWithContext(ctx context.Context) ChallengeDynamicIaCMapOutput {
	return o
}

func (o ChallengeDynamicIaCMapOutput) MapIndex(k pulumi.StringInput) ChallengeDynamicIaCOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ChallengeDynamicIaC {
		return vs[0].(map[string]*ChallengeDynamicIaC)[vs[1].(string)]
	}).(ChallengeDynamicIaCOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ChallengeDynamicIaCInput)(nil)).Elem(), &ChallengeDynamicIaC{})
	pulumi.RegisterInputType(reflect.TypeOf((*ChallengeDynamicIaCArrayInput)(nil)).Elem(), ChallengeDynamicIaCArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ChallengeDynamicIaCMapInput)(nil)).Elem(), ChallengeDynamicIaCMap{})
	pulumi.RegisterOutputType(ChallengeDynamicIaCOutput{})
	pulumi.RegisterOutputType(ChallengeDynamicIaCArrayOutput{})
	pulumi.RegisterOutputType(ChallengeDynamicIaCMapOutput{})
}
