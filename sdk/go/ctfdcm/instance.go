// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ctfdcm

import (
	"context"
	"reflect"

	"errors"
	"github.com/ctfer-io/pulumi-ctfdcm/sdk/go/ctfdcm/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// CTFd is built around the Challenge resource, which contains all the attributes to define a part of the Capture The Flag event.
//
// This implementation has support of On Demand infrastructures through [Chall-Manager](https://github.com/ctfer-io/chall-manager).
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/ctfer-io/pulumi-ctfd/sdk/v2/go/ctfd"
//	"github.com/ctfer-io/pulumi-ctfdcm/sdk/go/ctfdcm"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			chall, err := ctfdcm.NewChallengeDynamicIaC(ctx, "chall", &ctfdcm.ChallengeDynamicIaCArgs{
//				Category:    pulumi.String("cat"),
//				Description: pulumi.String("..."),
//				Value:       pulumi.Int(500),
//				Decay:       pulumi.Int(20),
//				Minimum:     pulumi.Int(50),
//				State:       pulumi.String("visible"),
//				Shared:      pulumi.Bool(true),
//				Scenario:    pulumi.String("localhost:5000/some/scenario:v0.1.0"),
//			})
//			if err != nil {
//				return err
//			}
//			pandatix, err := ctfd.NewUser(ctx, "pandatix", &ctfd.UserArgs{
//				Email:    pulumi.String("lucastesson@protonmail.com"),
//				Password: pulumi.String("password"),
//			})
//			if err != nil {
//				return err
//			}
//			ctfer, err := ctfd.NewTeam(ctx, "ctfer", &ctfd.TeamArgs{
//				Email:    pulumi.String("ctfer-io@protonmail.com"),
//				Password: pulumi.String("ctfer"),
//				Members: pulumi.StringArray{
//					pandatix.ID(),
//				},
//				Captain: pandatix.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = ctfdcm.NewInstance(ctx, "ist", &ctfdcm.InstanceArgs{
//				ChallengeId: chall.ID(),
//				SourceId:    ctfer.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type Instance struct {
	pulumi.CustomResourceState

	// The challenge to provision an instance of.
	ChallengeId pulumi.StringOutput `pulumi:"challengeId"`
	// The source of whom to provision an instance for.
	SourceId pulumi.StringOutput `pulumi:"sourceId"`
}

// NewInstance registers a new resource with the given unique name, arguments, and options.
func NewInstance(ctx *pulumi.Context,
	name string, args *InstanceArgs, opts ...pulumi.ResourceOption) (*Instance, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ChallengeId == nil {
		return nil, errors.New("invalid value for required argument 'ChallengeId'")
	}
	if args.SourceId == nil {
		return nil, errors.New("invalid value for required argument 'SourceId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Instance
	err := ctx.RegisterResource("ctfdcm:index/instance:Instance", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetInstance gets an existing Instance resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetInstance(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *InstanceState, opts ...pulumi.ResourceOption) (*Instance, error) {
	var resource Instance
	err := ctx.ReadResource("ctfdcm:index/instance:Instance", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Instance resources.
type instanceState struct {
	// The challenge to provision an instance of.
	ChallengeId *string `pulumi:"challengeId"`
	// The source of whom to provision an instance for.
	SourceId *string `pulumi:"sourceId"`
}

type InstanceState struct {
	// The challenge to provision an instance of.
	ChallengeId pulumi.StringPtrInput
	// The source of whom to provision an instance for.
	SourceId pulumi.StringPtrInput
}

func (InstanceState) ElementType() reflect.Type {
	return reflect.TypeOf((*instanceState)(nil)).Elem()
}

type instanceArgs struct {
	// The challenge to provision an instance of.
	ChallengeId string `pulumi:"challengeId"`
	// The source of whom to provision an instance for.
	SourceId string `pulumi:"sourceId"`
}

// The set of arguments for constructing a Instance resource.
type InstanceArgs struct {
	// The challenge to provision an instance of.
	ChallengeId pulumi.StringInput
	// The source of whom to provision an instance for.
	SourceId pulumi.StringInput
}

func (InstanceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*instanceArgs)(nil)).Elem()
}

type InstanceInput interface {
	pulumi.Input

	ToInstanceOutput() InstanceOutput
	ToInstanceOutputWithContext(ctx context.Context) InstanceOutput
}

func (*Instance) ElementType() reflect.Type {
	return reflect.TypeOf((**Instance)(nil)).Elem()
}

func (i *Instance) ToInstanceOutput() InstanceOutput {
	return i.ToInstanceOutputWithContext(context.Background())
}

func (i *Instance) ToInstanceOutputWithContext(ctx context.Context) InstanceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceOutput)
}

// InstanceArrayInput is an input type that accepts InstanceArray and InstanceArrayOutput values.
// You can construct a concrete instance of `InstanceArrayInput` via:
//
//	InstanceArray{ InstanceArgs{...} }
type InstanceArrayInput interface {
	pulumi.Input

	ToInstanceArrayOutput() InstanceArrayOutput
	ToInstanceArrayOutputWithContext(context.Context) InstanceArrayOutput
}

type InstanceArray []InstanceInput

func (InstanceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Instance)(nil)).Elem()
}

func (i InstanceArray) ToInstanceArrayOutput() InstanceArrayOutput {
	return i.ToInstanceArrayOutputWithContext(context.Background())
}

func (i InstanceArray) ToInstanceArrayOutputWithContext(ctx context.Context) InstanceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceArrayOutput)
}

// InstanceMapInput is an input type that accepts InstanceMap and InstanceMapOutput values.
// You can construct a concrete instance of `InstanceMapInput` via:
//
//	InstanceMap{ "key": InstanceArgs{...} }
type InstanceMapInput interface {
	pulumi.Input

	ToInstanceMapOutput() InstanceMapOutput
	ToInstanceMapOutputWithContext(context.Context) InstanceMapOutput
}

type InstanceMap map[string]InstanceInput

func (InstanceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Instance)(nil)).Elem()
}

func (i InstanceMap) ToInstanceMapOutput() InstanceMapOutput {
	return i.ToInstanceMapOutputWithContext(context.Background())
}

func (i InstanceMap) ToInstanceMapOutputWithContext(ctx context.Context) InstanceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceMapOutput)
}

type InstanceOutput struct{ *pulumi.OutputState }

func (InstanceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Instance)(nil)).Elem()
}

func (o InstanceOutput) ToInstanceOutput() InstanceOutput {
	return o
}

func (o InstanceOutput) ToInstanceOutputWithContext(ctx context.Context) InstanceOutput {
	return o
}

// The challenge to provision an instance of.
func (o InstanceOutput) ChallengeId() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.ChallengeId }).(pulumi.StringOutput)
}

// The source of whom to provision an instance for.
func (o InstanceOutput) SourceId() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.SourceId }).(pulumi.StringOutput)
}

type InstanceArrayOutput struct{ *pulumi.OutputState }

func (InstanceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Instance)(nil)).Elem()
}

func (o InstanceArrayOutput) ToInstanceArrayOutput() InstanceArrayOutput {
	return o
}

func (o InstanceArrayOutput) ToInstanceArrayOutputWithContext(ctx context.Context) InstanceArrayOutput {
	return o
}

func (o InstanceArrayOutput) Index(i pulumi.IntInput) InstanceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Instance {
		return vs[0].([]*Instance)[vs[1].(int)]
	}).(InstanceOutput)
}

type InstanceMapOutput struct{ *pulumi.OutputState }

func (InstanceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Instance)(nil)).Elem()
}

func (o InstanceMapOutput) ToInstanceMapOutput() InstanceMapOutput {
	return o
}

func (o InstanceMapOutput) ToInstanceMapOutputWithContext(ctx context.Context) InstanceMapOutput {
	return o
}

func (o InstanceMapOutput) MapIndex(k pulumi.StringInput) InstanceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Instance {
		return vs[0].(map[string]*Instance)[vs[1].(string)]
	}).(InstanceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceInput)(nil)).Elem(), &Instance{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceArrayInput)(nil)).Elem(), InstanceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceMapInput)(nil)).Elem(), InstanceMap{})
	pulumi.RegisterOutputType(InstanceOutput{})
	pulumi.RegisterOutputType(InstanceArrayOutput{})
	pulumi.RegisterOutputType(InstanceMapOutput{})
}
