// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ctfdcm

import (
	"context"
	"reflect"

	"github.com/ctfer-io/pulumi-ctfdcm/sdk/go/ctfdcm/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type ChallengeDynamicIaCRequirements struct {
	// Behavior if not unlocked, either hidden or anonymized.
	Behavior *string `pulumi:"behavior"`
	// List of the challenges ID.
	Prerequisites []string `pulumi:"prerequisites"`
}

// ChallengeDynamicIaCRequirementsInput is an input type that accepts ChallengeDynamicIaCRequirementsArgs and ChallengeDynamicIaCRequirementsOutput values.
// You can construct a concrete instance of `ChallengeDynamicIaCRequirementsInput` via:
//
//	ChallengeDynamicIaCRequirementsArgs{...}
type ChallengeDynamicIaCRequirementsInput interface {
	pulumi.Input

	ToChallengeDynamicIaCRequirementsOutput() ChallengeDynamicIaCRequirementsOutput
	ToChallengeDynamicIaCRequirementsOutputWithContext(context.Context) ChallengeDynamicIaCRequirementsOutput
}

type ChallengeDynamicIaCRequirementsArgs struct {
	// Behavior if not unlocked, either hidden or anonymized.
	Behavior pulumi.StringPtrInput `pulumi:"behavior"`
	// List of the challenges ID.
	Prerequisites pulumi.StringArrayInput `pulumi:"prerequisites"`
}

func (ChallengeDynamicIaCRequirementsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ChallengeDynamicIaCRequirements)(nil)).Elem()
}

func (i ChallengeDynamicIaCRequirementsArgs) ToChallengeDynamicIaCRequirementsOutput() ChallengeDynamicIaCRequirementsOutput {
	return i.ToChallengeDynamicIaCRequirementsOutputWithContext(context.Background())
}

func (i ChallengeDynamicIaCRequirementsArgs) ToChallengeDynamicIaCRequirementsOutputWithContext(ctx context.Context) ChallengeDynamicIaCRequirementsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChallengeDynamicIaCRequirementsOutput)
}

func (i ChallengeDynamicIaCRequirementsArgs) ToChallengeDynamicIaCRequirementsPtrOutput() ChallengeDynamicIaCRequirementsPtrOutput {
	return i.ToChallengeDynamicIaCRequirementsPtrOutputWithContext(context.Background())
}

func (i ChallengeDynamicIaCRequirementsArgs) ToChallengeDynamicIaCRequirementsPtrOutputWithContext(ctx context.Context) ChallengeDynamicIaCRequirementsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChallengeDynamicIaCRequirementsOutput).ToChallengeDynamicIaCRequirementsPtrOutputWithContext(ctx)
}

// ChallengeDynamicIaCRequirementsPtrInput is an input type that accepts ChallengeDynamicIaCRequirementsArgs, ChallengeDynamicIaCRequirementsPtr and ChallengeDynamicIaCRequirementsPtrOutput values.
// You can construct a concrete instance of `ChallengeDynamicIaCRequirementsPtrInput` via:
//
//	        ChallengeDynamicIaCRequirementsArgs{...}
//
//	or:
//
//	        nil
type ChallengeDynamicIaCRequirementsPtrInput interface {
	pulumi.Input

	ToChallengeDynamicIaCRequirementsPtrOutput() ChallengeDynamicIaCRequirementsPtrOutput
	ToChallengeDynamicIaCRequirementsPtrOutputWithContext(context.Context) ChallengeDynamicIaCRequirementsPtrOutput
}

type challengeDynamicIaCRequirementsPtrType ChallengeDynamicIaCRequirementsArgs

func ChallengeDynamicIaCRequirementsPtr(v *ChallengeDynamicIaCRequirementsArgs) ChallengeDynamicIaCRequirementsPtrInput {
	return (*challengeDynamicIaCRequirementsPtrType)(v)
}

func (*challengeDynamicIaCRequirementsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ChallengeDynamicIaCRequirements)(nil)).Elem()
}

func (i *challengeDynamicIaCRequirementsPtrType) ToChallengeDynamicIaCRequirementsPtrOutput() ChallengeDynamicIaCRequirementsPtrOutput {
	return i.ToChallengeDynamicIaCRequirementsPtrOutputWithContext(context.Background())
}

func (i *challengeDynamicIaCRequirementsPtrType) ToChallengeDynamicIaCRequirementsPtrOutputWithContext(ctx context.Context) ChallengeDynamicIaCRequirementsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChallengeDynamicIaCRequirementsPtrOutput)
}

type ChallengeDynamicIaCRequirementsOutput struct{ *pulumi.OutputState }

func (ChallengeDynamicIaCRequirementsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ChallengeDynamicIaCRequirements)(nil)).Elem()
}

func (o ChallengeDynamicIaCRequirementsOutput) ToChallengeDynamicIaCRequirementsOutput() ChallengeDynamicIaCRequirementsOutput {
	return o
}

func (o ChallengeDynamicIaCRequirementsOutput) ToChallengeDynamicIaCRequirementsOutputWithContext(ctx context.Context) ChallengeDynamicIaCRequirementsOutput {
	return o
}

func (o ChallengeDynamicIaCRequirementsOutput) ToChallengeDynamicIaCRequirementsPtrOutput() ChallengeDynamicIaCRequirementsPtrOutput {
	return o.ToChallengeDynamicIaCRequirementsPtrOutputWithContext(context.Background())
}

func (o ChallengeDynamicIaCRequirementsOutput) ToChallengeDynamicIaCRequirementsPtrOutputWithContext(ctx context.Context) ChallengeDynamicIaCRequirementsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ChallengeDynamicIaCRequirements) *ChallengeDynamicIaCRequirements {
		return &v
	}).(ChallengeDynamicIaCRequirementsPtrOutput)
}

// Behavior if not unlocked, either hidden or anonymized.
func (o ChallengeDynamicIaCRequirementsOutput) Behavior() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ChallengeDynamicIaCRequirements) *string { return v.Behavior }).(pulumi.StringPtrOutput)
}

// List of the challenges ID.
func (o ChallengeDynamicIaCRequirementsOutput) Prerequisites() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ChallengeDynamicIaCRequirements) []string { return v.Prerequisites }).(pulumi.StringArrayOutput)
}

type ChallengeDynamicIaCRequirementsPtrOutput struct{ *pulumi.OutputState }

func (ChallengeDynamicIaCRequirementsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ChallengeDynamicIaCRequirements)(nil)).Elem()
}

func (o ChallengeDynamicIaCRequirementsPtrOutput) ToChallengeDynamicIaCRequirementsPtrOutput() ChallengeDynamicIaCRequirementsPtrOutput {
	return o
}

func (o ChallengeDynamicIaCRequirementsPtrOutput) ToChallengeDynamicIaCRequirementsPtrOutputWithContext(ctx context.Context) ChallengeDynamicIaCRequirementsPtrOutput {
	return o
}

func (o ChallengeDynamicIaCRequirementsPtrOutput) Elem() ChallengeDynamicIaCRequirementsOutput {
	return o.ApplyT(func(v *ChallengeDynamicIaCRequirements) ChallengeDynamicIaCRequirements {
		if v != nil {
			return *v
		}
		var ret ChallengeDynamicIaCRequirements
		return ret
	}).(ChallengeDynamicIaCRequirementsOutput)
}

// Behavior if not unlocked, either hidden or anonymized.
func (o ChallengeDynamicIaCRequirementsPtrOutput) Behavior() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ChallengeDynamicIaCRequirements) *string {
		if v == nil {
			return nil
		}
		return v.Behavior
	}).(pulumi.StringPtrOutput)
}

// List of the challenges ID.
func (o ChallengeDynamicIaCRequirementsPtrOutput) Prerequisites() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ChallengeDynamicIaCRequirements) []string {
		if v == nil {
			return nil
		}
		return v.Prerequisites
	}).(pulumi.StringArrayOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ChallengeDynamicIaCRequirementsInput)(nil)).Elem(), ChallengeDynamicIaCRequirementsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ChallengeDynamicIaCRequirementsPtrInput)(nil)).Elem(), ChallengeDynamicIaCRequirementsArgs{})
	pulumi.RegisterOutputType(ChallengeDynamicIaCRequirementsOutput{})
	pulumi.RegisterOutputType(ChallengeDynamicIaCRequirementsPtrOutput{})
}
