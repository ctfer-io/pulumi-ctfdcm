// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace CTFerio.Ctfdcm
{
    /// <summary>
    /// CTFd is built around the Challenge resource, which contains all the attributes to define a part of the Capture The Flag event.
    /// 
    /// This implementation has support of On Demand infrastructures through [Chall-Manager](https://github.com/ctfer-io/chall-manager).
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Ctfd = CTFerio.Ctfd;
    /// using Ctfdcm = CTFerio.Ctfdcm;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var chall = new Ctfdcm.ChallengeDynamicIaC("chall", new()
    ///     {
    ///         Category = "cat",
    ///         Description = "...",
    ///         Value = 500,
    ///         Decay = 20,
    ///         Minimum = 50,
    ///         State = "visible",
    ///         Shared = true,
    ///         Scenario = "localhost:5000/some/scenario:v0.1.0",
    ///     });
    /// 
    ///     var pandatix = new Ctfd.User("pandatix", new()
    ///     {
    ///         Email = "lucastesson@protonmail.com",
    ///         Password = "password",
    ///     });
    /// 
    ///     var ctfer = new Ctfd.Team("ctfer", new()
    ///     {
    ///         Email = "ctfer-io@protonmail.com",
    ///         Password = "ctfer",
    ///         Members = new[]
    ///         {
    ///             pandatix.Id,
    ///         },
    ///         Captain = pandatix.Id,
    ///     });
    /// 
    ///     var ist = new Ctfdcm.Instance("ist", new()
    ///     {
    ///         ChallengeId = chall.Id,
    ///         SourceId = ctfer.Id,
    ///     });
    /// 
    /// });
    /// ```
    /// </summary>
    [CtfdcmResourceType("ctfdcm:index/instance:Instance")]
    public partial class Instance : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The challenge to provision an instance of.
        /// </summary>
        [Output("challengeId")]
        public Output<string> ChallengeId { get; private set; } = null!;

        /// <summary>
        /// The source of whom to provision an instance for.
        /// </summary>
        [Output("sourceId")]
        public Output<string> SourceId { get; private set; } = null!;


        /// <summary>
        /// Create a Instance resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Instance(string name, InstanceArgs args, CustomResourceOptions? options = null)
            : base("ctfdcm:index/instance:Instance", name, args ?? new InstanceArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Instance(string name, Input<string> id, InstanceState? state = null, CustomResourceOptions? options = null)
            : base("ctfdcm:index/instance:Instance", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/ctfer-io/",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Instance resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Instance Get(string name, Input<string> id, InstanceState? state = null, CustomResourceOptions? options = null)
        {
            return new Instance(name, id, state, options);
        }
    }

    public sealed class InstanceArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The challenge to provision an instance of.
        /// </summary>
        [Input("challengeId", required: true)]
        public Input<string> ChallengeId { get; set; } = null!;

        /// <summary>
        /// The source of whom to provision an instance for.
        /// </summary>
        [Input("sourceId", required: true)]
        public Input<string> SourceId { get; set; } = null!;

        public InstanceArgs()
        {
        }
        public static new InstanceArgs Empty => new InstanceArgs();
    }

    public sealed class InstanceState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The challenge to provision an instance of.
        /// </summary>
        [Input("challengeId")]
        public Input<string>? ChallengeId { get; set; }

        /// <summary>
        /// The source of whom to provision an instance for.
        /// </summary>
        [Input("sourceId")]
        public Input<string>? SourceId { get; set; }

        public InstanceState()
        {
        }
        public static new InstanceState Empty => new InstanceState();
    }
}
