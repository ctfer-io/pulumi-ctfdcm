// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace CTFerio.Ctfdcm.Outputs
{

    [OutputType]
    public sealed class GetChallengesDynamiciacChallengeResult
    {
        /// <summary>
        /// An optional key=value map (both strings) to pass to the scenario.
        /// </summary>
        public readonly ImmutableDictionary<string, string> Additional;
        /// <summary>
        /// Attribution to the creator(s) of the challenge.
        /// </summary>
        public readonly string Attribution;
        /// <summary>
        /// Category of the challenge that CTFd groups by on the web UI.
        /// </summary>
        public readonly string Category;
        /// <summary>
        /// Connection Information to connect to the challenge instance, useful for pwn or web pentest.
        /// </summary>
        public readonly string ConnectionInfo;
        /// <summary>
        /// The decay defines from each number of solves does the decay function triggers until reaching minimum. This function is defined by CTFd and could be configured through `.function`.
        /// </summary>
        public readonly int Decay;
        /// <summary>
        /// Description of the challenge, consider using multiline descriptions for better style.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// Whether to destroy the instance once flagged.
        /// </summary>
        public readonly bool DestroyOnFlag;
        /// <summary>
        /// Decay function to define how the challenge value evolve through solves, either linear or logarithmic.
        /// </summary>
        public readonly string Function;
        /// <summary>
        /// Identifier of the challenge.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The cost (in mana) of the challenge once an instance is deployed.
        /// </summary>
        public readonly int ManaCost;
        /// <summary>
        /// The number of instances after which not to pool anymore.
        /// </summary>
        public readonly int Max;
        /// <summary>
        /// Maximum amount of attempts before being unable to flag the challenge.
        /// </summary>
        public readonly int MaxAttempts;
        /// <summary>
        /// The minimum number of instances to set in the pool.
        /// </summary>
        public readonly int Min;
        /// <summary>
        /// The minimum points for a dynamic-score challenge to reach with the decay function. Once there, no solve could have more value.
        /// </summary>
        public readonly int Minimum;
        /// <summary>
        /// Name of the challenge, displayed as it.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Suggestion for the end-user as next challenge to work on.
        /// </summary>
        public readonly int Next;
        /// <summary>
        /// List of required challenges that needs to get flagged before this one being accessible. Useful for skill-trees-like strategy CTF.
        /// </summary>
        public readonly Outputs.GetChallengesDynamiciacChallengeRequirementsResult Requirements;
        /// <summary>
        /// The OCI reference to the scenario.
        /// </summary>
        public readonly string Scenario;
        /// <summary>
        /// Whether the instance will be shared between all players.
        /// </summary>
        public readonly bool Shared;
        /// <summary>
        /// State of the challenge, either hidden or visible.
        /// </summary>
        public readonly string State;
        /// <summary>
        /// List of challenge tags that will be displayed to the end-user. You could use them to give some quick insights of what a challenge involves.
        /// </summary>
        public readonly ImmutableArray<string> Tags;
        /// <summary>
        /// The timeout (in seconds) after which the instance will be janitored.
        /// </summary>
        public readonly int Timeout;
        /// <summary>
        /// List of challenge topics that are displayed to the administrators for maintenance and planification.
        /// </summary>
        public readonly ImmutableArray<string> Topics;
        /// <summary>
        /// The date until the instance could run before being janitored.
        /// </summary>
        public readonly string Until;
        /// <summary>
        /// The value (points) of the challenge once solved. It is mapped to `initial` under the hood, but displayed as `value` for consistency with the standard challenge.
        /// </summary>
        public readonly int Value;

        [OutputConstructor]
        private GetChallengesDynamiciacChallengeResult(
            ImmutableDictionary<string, string> additional,

            string attribution,

            string category,

            string connectionInfo,

            int decay,

            string description,

            bool destroyOnFlag,

            string function,

            string id,

            int manaCost,

            int max,

            int maxAttempts,

            int min,

            int minimum,

            string name,

            int next,

            Outputs.GetChallengesDynamiciacChallengeRequirementsResult requirements,

            string scenario,

            bool shared,

            string state,

            ImmutableArray<string> tags,

            int timeout,

            ImmutableArray<string> topics,

            string until,

            int value)
        {
            Additional = additional;
            Attribution = attribution;
            Category = category;
            ConnectionInfo = connectionInfo;
            Decay = decay;
            Description = description;
            DestroyOnFlag = destroyOnFlag;
            Function = function;
            Id = id;
            ManaCost = manaCost;
            Max = max;
            MaxAttempts = maxAttempts;
            Min = min;
            Minimum = minimum;
            Name = name;
            Next = next;
            Requirements = requirements;
            Scenario = scenario;
            Shared = shared;
            State = state;
            Tags = tags;
            Timeout = timeout;
            Topics = topics;
            Until = until;
            Value = value;
        }
    }
}
